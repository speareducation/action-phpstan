name: NewRelic ECS Release Markers
description: Reads a Task Definition and sends a release marker to NewRelic

inputs:
  run-in-container:
    description: (Bool) Whether to run the command inside of the docker container
    required: false
  output-file:
    description: The output file
    required: true
  args:
    description: Additional arguments
    required: false

outputs:
  error-count:
    description: Number of errors found
    value: ${{ steps.phpstan.outputs.error-count }}
  results:
    description: JSON formatted results
    value: ${{ steps.phpstan.outputs.results }}
  results-md:
    description: A markdown representation of the results for PR comments or emails
    value: ${{ steps.phpstan-markdown.outputs.results-md }}

runs:
  using: composite
  env:
    PHPSTAN_COMMAND: 'vendor/bin/phpstan --memory-limit=1G --error-format=json ${{ inputs.args }} > ${{ inputs.output-file }} || :'
  steps:

    - if: inputs.run-in-container
      uses: speareducation/action-docker-exec@main
      with:
        command: ${{ env.PHPSTAN_COMMAND }}

    - if: '!inputs.run-in-container'
      shell: bash
      run: bash -c $PHPSTAN_COMMAND

    - name: Process Results
      id: phpstan
      shell: bash
      run: |
        errorCount=$(jq -r .totals.file_errors ${{ inputs.output-file }})
        echo "error-count=$errorCount" >> $GITHUB_OUTPUT
        echo "results=$(cat ${{ inputs.output-file }})" >> $GITHUB_OUTPUT

    # TODO: Update this to be pretty markdown
    - name: Generate Markdown
      id: phpstan-markdown
      shell: bash
      run: |
        tmpFile=$(mktemp)
        echo '# PHPStan Results' >> $tmpFile
        cat ${{ inputs.output-file }} | jq -r '.files | to_entries | map(
          ("**" + (.key|tostring) + "**"),
          (
            .value.messages | map(
              ("- Line " + (.line|tostring) + ": " + (.message|tostring))
            )[]
          ),
          ""
        )[]' >> $tmpFile
        payload=$(cat $tmpFile)
        # escape payload so it can be sent through output
        payload="${payload//'%'/'%25'}"
        payload="${payload//$'\n'/'%0A'}"
        payload="${payload//$'\r'/'%0D'}"
        echo "results-md=${payload:-No errors found.}" >> $GITHUB_OUTPUT
